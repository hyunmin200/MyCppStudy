참조자(Reference)의 이해

무엇이 변수인가?
변수는 할당된 메모리 공간에 붙혀진 이름이다.
그리고 그 이름을 통하여 해당 메모리 공간에 접근이 가능하다.

Reference란?
변수에다가 이름을 하나 더 붙여주고 싶을 때
int &ref = num 이런 식으로 사용을 하여서
num이라는 변수에 ref라는 이름이 하나가 더 붙게 되는 것이다.
그래서 메모리공간에는 num이름과 ref라는 이름 둘다 있게 되는 것이다.

이걸 가르켜 참조자라고 이야기를 함

변수의 앞에 & 넣으면 변수의 주소값을 반환을 반환하지만
변수를 선언하는 과정에 등장을 하였기 때문에 참초자의 선언이 되는것이다.

int num = 20;
int &ref = num;
위처럼 선언을 하였을 때
ref++; 해준다면
cout << num;
을 출력해본다면 21이 나온다.

정리를 해보자면
int num1 = 2022;
라고 한다면 변수 선언이 되어 num1이라는 이름으로
메모리 공간이 할당되는 것이고

int &num2 = num1;
을 한다면 참조자의 선언으로 인해서 num1의 메모리 공간에
num2라는 이름이 추가로 붙게 된다.

int num1 = 1020;
int& num2 = num1; // 동일한 메모리 공간을 참조하게 됨

num2 = 3047;
cout << "VAL: " << num1 << endl;
cout << "REF: " << num2 << endl;

cout << "VAL: " << &num1 << endl;
cout << "REF: " << &num2 << endl;
return 0;

이렇게 출력을 한다면 num1과 num2가 완전히
같은 공간에 있다는 것을 알 수 있다.

int num1 = 1;
int &num2 = num1;
int &num3 = num2;
int &num4 = num3;
이런 식으로 여러개의 참조자를 만들 수 있다.

참조자는 변수의 별명을 만들어주는 것과 같다.
만약 200원이라는 사람이 있으면
200원은 학생이야! 라는 말과
200won은 학생이야! 라는 말이 똑같은 것이다.

참조자의 선언 가능 범위

변수를 대상으로만 참조할 수 있도록 일단 제한 되어 있다.

int &ref=20
상수 대상으로의 참조자 선언을 불가능하다.
int &ref;
참조자는 생성과 동시에 누군가를 참조해야 한다.
int &ref=null;
포인터처럼 NULL로 초기화하는 것도 불가능하다.

그리고 참조자는 참조의 대상을 변경할 수 없다.


#include <iostream>

using namespace std;
int main(void)
{
	int arr[3] = { 1, 3, 5 };
	int& ref1 = arr[0];
	int& ref2 = arr[1];
	int& ref3 = arr[2];

	cout << ref1 << endl;
	cout << ref2 << endl;
	cout << ref3 << endl;
	return 0;
}
이런 식으로 변수의 성향을 지니는 대상이라면 참조자의 선언이 가능하다.

포인터 변수 대상의 참조자 선언

#include <iostream>

using namespace std;
int main(void)
{
	int num = 12;
	int* ptr = &num;
	int** dptr = &ptr;

	int &ref = num;
	int *(&pref) = ptr;
	int **(&dpref) = dptr;

	cout << ref << endl;
	cout << *pref << endl;
	cout << **dpref << endl;
	return 0;
}

이런식으로 포인터에도 참조자를 사용할 수 있다.