재귀함수

재귀함수는 함수 안에서 자기자신을 호출하는 것이다.

일단 재귀함수는 함수에 대한 이해도가 높아야 하기 때문에 지난시간의
팩토리얼 함수로 어떤 식으로 함수가 작동하는 지 보고 재귀함수를 사용 해 보자

디버깅 할 때 호출 스택을 잘 안다면 빨리 오류를 찾아 고칠 수 있다

저번에 말했던 것 처럼 함수안에 있는 변수는 지역변수이다.
main함수라고 하면 스택 메모리 영역에 있다
스택은 선입후출이다.
호출 스택은
현재 호출되어있는 함수들의 메모리 상황을 보여주는 것이다.
호출 스택에서 원하는 함수를 더블 클릭하면 그 쪽 지역으로 보여줌

이렇게 디버깅을 활용하면 쉽게 오류를 찾아 낼 수 있다.
코딩을 머리로만 하지말고 디버깅이라는 편한 기능도 사용하자.

함수가 끝나고 리턴을 하였을 때 종료가 되는데 어떻게 값이 전달이 되지?
라고 할 수 있는데 임시로 빠르게 끌어다 쓸 수 있는 장소를 사용한다
함수가 리턴될 때 이런 값들을 연산장치인 cpu가 레지스터 메모리에 잠시 받아둔다.
그리고 메모리 영역이 사라지고 함수를 호출한 곳에서 레지스터에서 값을 끌어오는 것이다.
이걸 이해하면 이제 재귀함수를 이해할 수 있어야 한다.

int Factorial(int _iNum) 
{
	int iValue = 1;

	for (int j = 0; j < _iNum - 1; ++j) 
	{
		iValue *= (j + 2);
	}

	Factorial(10);
	
	return iValue;
}
잘못된 코드이지만 이렇게 펙토리얼을 안에서 다시 호출한다면
Factorial함수라는 것위에 또 Factorial함수 스택이 쌓이는 것이다.
이렇게 계속 호출되는 것이다.
예)
A함수 -> B함수 호출 -> C함수 호출 이지만
이게 전부
A함수 -> A함수 -> A함수 인것이다.
이렇게 작동을 하다 끝이 나면 되돌아가서 B함수가고 끝나면
A함수에 가서 종료되면 메인함수로 가는 것이다.
결국 이 과정이 자기자신을 통해서 자기자신을 호출한 것이다.

하지만 만약 위에 코드처럼 작성을 해버린다면
함수가 쌓이기만하고 종료가 될 수 없다.
이러다가 스택 메모리 영역의 한계치에 도달하면 발생하는 에러가
Stack overflow(스택 오버 플로우)이다.

재귀함수는 반드시 탈출조건이 있어야 한다.
재귀함수는 가독성, 구현의 용이하기 때문에 쓴다.
하지만 이 기준은 프로그래밍에 익숙해진 사람들 기준이다.
나중에 계층구조를 표현할 때 재귀함수만큼 간단한 게 없다
재귀함수는 반복문으로 대체가 가능한데 스택이랑 큐를 활용해야 해서 조금 까다롭다.
이 함수가 뭘 하려는지 파악이 안될 수 있다. 복잡해져서
하지만 재귀함수는 파악하기가 아주 쉽다.

하지만 재귀함수는 성능이 저하된다는 단점이 있다.
스택메모리 함수를 호출해서 쌓아가면서 역으로 되돌아가면서 재활용하는 식이다.
하나의 함수에서 여러개의 변수를 호출할 것을 스택을 변수처럼 사용해 하나씩 선언하는 것이다.
그래서 함수 호출 비용과 해체 비용까지 들어간다. 그것이 성능이 저하의 원인이다.
그래서 주의해서 짜야 한다.