함수

함수에 대해 조금 더 알아보자

프로그램이 실행 되면 제일 먼저 열리는 것은 메인함수이다.
프로그램이 종료되는 것은 메인함수가 종료되는 것이다.

하지만 우리는 그 안에 다른 함수들도 넣어서 만든다.
예를 들어 printf 같은 함수를 메인에서 호출하고 있다.
이게 복잡해지면 main의 내부 함수에서 함수를 호출하고 또 호출하고 이렇게
복잡해질 수 있다.

main에서 A호출하고 B호출하고 C호출을 한다면
C가 종료되면 B로 가고 B가 종료되면 A로 간다
여기서 이 함수들이 종료가 되려면 이 안의 코드들이 종료가 되야지 다음으로 넘어간다.

이 구조는 자료구조의 한 일종인 스택과 비슷하다.
쌓여간다는 의미의 스택
예를 들면
접시가 쌓여있으면 아래서 부터 꺼내가는 사람은 없다
쌓여있을 때는 위에서 부터 꺼내간다.
그래서 맨 마지막 접시는 위에 꺼를 다 꺼내가고 나서 마지막 접시를 꺼낼수있다.

이 마지막 접시가 메인함수와 같다.
그래서 접시가 하나하나씩 치워지면서 결국 맨아래접시(메인)까지 치워지면
다치워지는것(프로그램이 종료되는 것) 과 같다.

자료구조(Data struture)
자료구조는 어떠한 구조로 데이터를 관리 할 것인가
이걸 어떤식으로 다루고 효율적으로 다룰 것 인가
이런 학문이 자료구조라는 학문이다.

이 자료구조에 스택이라는 자료구조가 있다.
이녀석의 특징이 후입선출의 형태를 가진 형태를 스택이라고 한다.
나중에 들어온게 먼저 나간다.
먼저 들어온 것은 제일 늦게 나간다.

이런 자료구조가 있으면 먼저 들어온게 먼저나가는 자료구조도 있을 것이다.

이런 식으로 데이터를 관리하는 것을 '큐'라고 한다.
이런 큐라는 녀석은 선입선출 후입후출이다.
먼저들어면 먼저 나가고
늦게 들어오면 늦게 나가는 스택이랑 정반대이다.

하지만 우리에게 중요한 것은 스택이다.
왜냐하면 함수의 호출방식(동작방식)과 비슷하기 때문이다
함수가 사용하는 공간은 스택 메모리이다.

코드는 명령어의 집합이고 
이 명령을 수행했을 때에 그 수행에 맞게 동작하고 있는 곳이 메모리 영역이다.

마치 내가 사용하는 메모리 영역을 땅 덩어리라고 생각하면
내가 받은 명령서가 코드이다
코드를 봤을 때 내가 건물 두채를 만들라고 되있는 것이다.
그리고 그 건물 철거해 라고 되어있으면 철거되는 것이다.
이 명령으로 메모리영역을 조작하고 관리하고 값을 넣는 것이다.
함수라는 것은 명령의 집합체이다.
이런 식으로 굴러가는 것이다.


