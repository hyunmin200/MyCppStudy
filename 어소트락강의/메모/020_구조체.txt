구조체!
C스타일 구조체

typedef struct _tagMyST {
	int a;
	float k;
}MYST;
이런식으로 사용할 수 있음

그리고 구조체는 사용자 정의 자료형이라고 할 수 있음

여기서 잠깐!
{
	자료형(데이터타입)
	데이터가 무엇인지 설명을 해주는 것
}

구조체는 내가 만들고 싶은 자료형을 만드는 것이다.
그래서 자료형 처럼 사용이 가능핟.
MYST t;

구조체는 선언을 하는 것이 아닌 정의를 하는 것이여서 안에 값들이 실체화가 되어있지는 않는다.
안에 값을 넣는 방법은
t.a = 10;
t.f = 10.231f;
이런식으로 값을 넣을 수 있다.

하지만 이렇게 자료형을 만든다고 해도 기본 자료형의 집합체이다.
하지만 처음은 이렇게 사용할 수 밖에 없다.
하지만 구조체도 모듈화가 된다.
 MYST라는 구조체를 BIG이라는 구조체안에 넣을 수 있다.
이렇게 구조체도 확장되어서 나아갈 수 있다.

구조체를 선언할 때 핵심 키워드는 struct이다.
typedef은 타입을 재정의 해주는 것이다.

예를들어
typedef int INT;
이렇게 INT로 정의를 해버리면

INT a; 라고 적어도 컴파일러가 int자료형으로 본다.

C문법에서는 struct를 사용할 때 애가 구조체라는 것을 명시를 해줘야 한다.
struct NewStruct a; 이런식으로 사용가능하다 (태그명이라고 부름)
하지만 매번 struct를 붙이면 불편해지기 때문에

typedef를 사용해 구조체에게 새로운 이름을 부여해주는 것이다.
이러면 굳이 struct를 부여할 필요가 없다.

C++에서는 개선이 되어서 굳이 저럴 필요가 없다.
그래서 NewStruct a; 도 허용이 된다.

WinApi로 가면 모든 구조체가 다 typedef로 정의가 되어있다.
왜냐하면 c랑 c++ 양쪽에서 다 사용하기 위해서 이다.

구조체를 처음에 초기화를 할 수 있는데 구조체도 배열과 비슷하게 초기화가 가능하다.

배열같은 경우도
int arr[10] = {1, 2, 3, 4, 5, 6} (이런식으로 선언이 될 수 있다. 공백의 부분은 0으로 초기화됨)
구조체도
MYST t = {100, 3.14f}; (이런식으로 구조체안에 숫자를 순서대로 초기화가 가능하다.

여기서 3.141XXX 이런식으로 나올 수 있는데
실수는 근사값을 얻어오는 것이여서 약간의 오차가 있을 수 있다.

