배열을 알기 위해서는 포인터라는 개념과 함께 배워야 함
포인터라는 개념은 클래스, 구조체 등등 다양한 곳에서 응용이 된다.
자기가 알고 있는 것으로만 접근을 해야 (추측X)
A만 알고있는데 B까지의 개념을 생각하지 말라는 뜻

배열을 왜 사용하는가?
내가 int형 변수를 10개를 만들고 싶다
하지만 변수하나를 만들 때에는 이름을 다 지정해줘야 하기 때문에
너무 오래걸리고 비효율적이다.

배열 기본 문법
자료형 변수 이름[배열길이] = { }; (아무것도 없으면 0으로 초기화)
예) int iArray[10] = { };

변수는 변수이름으로 접근할 수 있지만
배열은 개별적으로 어떻게 접근하냐 할 수 있는데
이럴 때에는 인덱스 접근을 하면 된다.
예) iArray[4] = 10; (5번째 접근)
어? 왜 5번째? 할 수 있는데
저 괄호안에 숫자는 '인덱스'이다.
배열의 인덱스는 0부터 시작하기 때문에
0, 1, 2, 3, 4 이렇게 4가 5번째인걸 알 수 있다.
그래서 접근할 수 있는 최대 인덱스는 9가 되는 것을 알 수 있다.
(10을 적으면 문제가 난다.)

Visual Studio에 
Debug에서는 잘 잡아주지만
Release에서는 못 잡을 수 있다.

그래서 이것은 굉장히 위험하다.
하지만 이 실수는 흔한 실수이다.
그래서 배열의 인덱스를 통한 계산식을 사용할 때에는 주의할 필요가 있다.

과연 인덱스를 초과해서 접근하는 것이 어떤 의미일까?
배열의 특징으로 메모리가 연속적인 구조이다.
int형 배열을 10개로 만든다면
int형 데이터들이 10개가 서있는 것이다.
인덱스를 초과해버리면 10개가 서있는데 11개를 접근해버리니
거기에 무엇이 있는지 모른다.
그래서 메인변수에 있다면 우연이 다른 변수에 접근하여 값을 넣어 버릴 수 도 있는 것이다!
왜냐하면

Main함수의 스택에 다른 변수가 있는데
배열의 주소가 10까지 있었는데 11을 접근했는데
그 변수의 주소가 11에 있다면 그 변수에 배열의 잘못된 값을 넣을 수 있다는 것이다.

이렇게 되면 Debug에서도 오류를 못잡을 수도 있다.

항상 조심하자!