0000 0000 양수
1000 0000 음수
양수와 음수를 구분 하는 부분을 MSB라고 부름
(Most Significant Bit) 최상위 부호 비트
컴퓨터에서는 음수를 뺄 때
5 + (-5) = 0 이런 식으로 받아드린다.
5가 0이 되는 수가 -5다 이런 식으로 그러므로
0111 1111(127)이 있다고 치면 여기에 1000 0001만 더한다고 한다면?
그러면 0000 0000이 나온다 그러므로 1000 0001은 -127이라고 할 수 있는 것이다.

하나 더 해보자면
0000 0001이 있다고 치고 여기에 1111 1111을 더한다고 해보자
그러면 0000 0000이 나온다 그러므로 1111 1111은 -1이 된다.

unsigned char에 255와 char의 255은 숫자(비트)는 같지만 값은 다르게 인식이 된다.
(unsigned char는 255, char는 -1로 인식이 된다)
그러니 보는 관점에 따라서 전혀 다르게 해석이 될 수 있다.
뭐 예를 들어보자면 아빠라는 사람이 있다고 치면 나한테는 아빠이지만
할아버지한테는 아들인 것 과 같은 논리라고 볼 수 있다.
본질적으로는 다르지 않지만 누가 어떤 관점으로 보냐에 따라서 해석의 차이가 생길 수 있다.
여기서도 음수의 관점으로 보았을 때는 -1이 지만 양수의 관점으로 보았을 때에는 255라는 것이다.
그래서 unsigned char에 -1을 넣었을 때도 255가 된다.

음수를 찾는 더 쉬운 방법으로는 2의 보수법이 있다
0000 0010 = 2 에 -2를 찾는다면 0인 부분을 전부 1로 바꿔줍니다.
1111 1101 이것 처럼 그리고 더해줍니다 
1111 1111 하지만 이러면 0000 0000이 아니게 됩니다. 하지만 여기서 1을 더하면 0000 0000이 되기 때문에
더하기 전에 먼저 1111 1101에 1을 더해주면
1111 1110 이 되는데 이것이 -2입니다.
결국 그냥 자기가 찾는 수에서 0을 1로 바꿔주고(반전) 1을 더한 수가 음수인 것입니다.

자료형의 바이트 수가 1,2,4,8 이렇게 늘어날 때 마다 수가 기하급수 적으로 늘어난다.
게임을 만들다가 만약 int로 캐릭터의 공격력을 지정해다고 했을 때 게임 출시때에는 유저들의 공격력이 100~300정도 였는데
게임이 계속되다 보니 데미지가 10억 20억 이렇게 뜰 때 공격력이 21억이 넘었을 때 딱 최상위 비트 1이 되었을 때 signed에서는
음수로 보기 때문에 음수가 되어서 몬스터를 때렸는데 체력이 차는 이러한 버그가 생길 수 있다.

이러한 숫자가 커져서 와우 같은 경우에는 예전에 스케일링을 줄였다.
보스 체력이 50억이였다면 5000만으로 플레이어 공격력도 딱 비율에 맞게 줄인 이런 사태가 일어날 수 있다.

그래서 옛날 게임에는 255가 제한인 게임들이 있었다. 스텟이 255까지 제한 이런식으로 이게 1바이트가 표현할 수 있는 양의 정수의 최대값인 것 이다.